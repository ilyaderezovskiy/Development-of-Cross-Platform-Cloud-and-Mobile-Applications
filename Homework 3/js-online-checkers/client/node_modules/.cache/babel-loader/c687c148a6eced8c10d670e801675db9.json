{"ast":null,"code":"var _jsxFileName = \"/Users/ilyaderezovskiy/Desktop/js-online-checkers/client/src/Game.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Spinner from 'react-bootstrap/Spinner';\nimport classNames from 'classnames';\nimport './Game.css';\nconst colorMap = {\n  0: 'empty',\n  1: 'red',\n  2: 'black',\n  3: 'red',\n  4: 'black',\n  5: 'green',\n  6: 'yellow',\n  7: 'green',\n  8: 'yellow'\n};\nexport default function Game({\n  leaveGame,\n  movePiece,\n  game,\n  color,\n  sendChat\n}) {\n  const [selectedPiece, setSelectedPiece] = useState({});\n  const [chatText, setChatText] = useState('');\n  useEffect(() => {\n    return () => leaveGame();\n  }, []);\n\n  const selectPiece = (i, j) => {\n    if (game.turn !== color) return;\n    if (colorMap[game.board[i][j]] !== color) return;\n    setSelectedPiece({\n      i,\n      j\n    });\n  };\n\n  const dropSelectedPiece = (i, j) => {\n    if (game.turn !== color) return;\n    if (game.board[i][j] !== 0) return;\n    if ((i + j) % 2 === 1) return;\n    movePiece({\n      selectedPiece,\n      destination: {\n        i,\n        j\n      }\n    });\n    setSelectedPiece({});\n  };\n\n  const isPieceSelected = (i, j) => {\n    return selectedPiece.i === i && selectedPiece.j === j;\n  };\n\n  const getColor = piece => {\n    if (piece === 1) return 'red';\n    if (piece === 2) return 'black';\n    if (piece === 5) return 'green';\n    if (piece === 6) return 'yellow';\n  };\n\n  const renderBoard = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, game.board.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, row.map((piece, j) => /*#__PURE__*/React.createElement(\"div\", {\n      key: `${i} ${j}`,\n      className: classNames('cell', {\n        gray: (i + j) % 2 === 0,\n        white: (i + j) % 2 !== 0\n      }),\n      onClick: () => dropSelectedPiece(i, j),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }, piece !== 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('piece', {\n        selected: isPieceSelected(i, j),\n        red: piece === 1,\n        black: piece === 2,\n        blackQueen: piece === 4,\n        redQueen: piece === 3,\n        green: piece === 5,\n        yellow: piece === 6,\n        greenQueen: piece === 7,\n        yellowQueen: piece === 8,\n        clickable: color === getColor(piece)\n      }),\n      onClick: () => selectPiece(i, j),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 19\n      }\n    }))))));\n  };\n\n  const renderChat = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \"Game Chat\"), game.chat && game.chat.map((message, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, message)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-input-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      value: chatText,\n      onChange: e => setChatText(e.target.value),\n      placeholder: \"Enter your chat here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      className: \"chat-button\",\n      variant: \"primary\",\n      onClick: () => {\n        sendChat(chatText);\n        setChatText('');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, \"Send\")));\n  };\n\n  const isGameStarted = () => game.numberOfPlayers === 4;\n\n  const renderWaiting = () => {\n    return /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, game.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, \"Waiting for an opponent....\")));\n  };\n\n  const renderGame = () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }, \"Your piece color is \", color), game.turn === color && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, \"It is your turn!\"), game.turn !== color && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, \"Waiting for opponent!\"), renderBoard()), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }\n    }, renderChat()));\n  };\n\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, !isGameStarted() && renderWaiting(), isGameStarted() && renderGame());\n}","map":{"version":3,"sources":["/Users/ilyaderezovskiy/Desktop/js-online-checkers/client/src/Game.jsx"],"names":["React","useEffect","useState","Row","Col","Button","Form","Spinner","classNames","colorMap","Game","leaveGame","movePiece","game","color","sendChat","selectedPiece","setSelectedPiece","chatText","setChatText","selectPiece","i","j","turn","board","dropSelectedPiece","destination","isPieceSelected","getColor","piece","renderBoard","map","row","gray","white","selected","red","black","blackQueen","redQueen","green","yellow","greenQueen","yellowQueen","clickable","renderChat","chat","message","idx","e","target","value","isGameStarted","numberOfPlayers","renderWaiting","name","renderGame"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Spinner from 'react-bootstrap/Spinner';\nimport classNames from 'classnames';\n\nimport './Game.css';\n\nconst colorMap = {\n  0: 'empty',\n  1: 'red',\n  2: 'black',\n  3: 'red',\n  4: 'black',\n  5: 'green',\n  6: 'yellow',\n  7: 'green',\n  8: 'yellow',\n};\n\nexport default function Game({\n  leaveGame,\n  movePiece,\n  game,\n  color,\n  sendChat,\n}) {\n  const [selectedPiece, setSelectedPiece] = useState({});\n  const [chatText, setChatText] = useState('');\n\n  useEffect(() => {\n    return () => leaveGame();\n  }, []);\n\n  const selectPiece = (i, j) => {\n    if (game.turn !== color) return;\n    if (colorMap[game.board[i][j]] !== color) return;\n    setSelectedPiece({ i, j });\n  };\n\n  const dropSelectedPiece = (i, j) => {\n    if (game.turn !== color) return;\n    if (game.board[i][j] !== 0) return;\n    if ((i + j) % 2 === 1) return;\n    movePiece({\n      selectedPiece,\n      destination: {\n        i,\n        j,\n      },\n    });\n    setSelectedPiece({});\n  };\n\n  const isPieceSelected = (i, j) => {\n    return selectedPiece.i === i && selectedPiece.j === j;\n  };\n\n  const getColor = (piece) => {\n    if (piece === 1) return 'red';\n    if (piece === 2) return 'black';\n    if (piece === 5) return 'green';\n    if (piece === 6) return 'yellow';\n  }\n\n  const renderBoard = () => {\n    return (\n      <div className=\"board\">\n        {game.board.map((row, i) => (\n          <div key={i} className=\"row\">\n            {row.map((piece, j) => (\n              <div\n                key={`${i} ${j}`}\n                className={classNames('cell', {\n                  gray: (i + j) % 2 === 0,\n                  white: (i + j) % 2 !== 0,\n                })}\n                onClick={() => dropSelectedPiece(i, j)}\n              >\n                {piece !== 0 && (\n                  <div\n                    className={classNames('piece', {\n                      selected: isPieceSelected(i, j),\n                      red: piece === 1,\n                      black: piece === 2,\n                      blackQueen: piece === 4,\n                      redQueen: piece === 3,\n                      green: piece === 5,\n                      yellow: piece === 6,\n                      greenQueen: piece === 7,\n                      yellowQueen: piece === 8,\n                      clickable: color === getColor(piece),\n                    })}\n                    onClick={() => selectPiece(i, j)}\n                  ></div>\n                )}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderChat = () => {\n    return (\n      <div>\n        <h2>Game Chat</h2>\n        {game.chat &&\n          game.chat.map((message, idx) => (\n            <div key={idx}>{message}</div>\n          ))}\n        <div className=\"chat-input-wrapper\">\n          <Form.Control\n            type=\"text\"\n            value={chatText}\n            onChange={(e) => setChatText(e.target.value)}\n            placeholder=\"Enter your chat here\"\n          />\n          <Button\n            className=\"chat-button\"\n            variant=\"primary\"\n            onClick={() => {\n              sendChat(chatText);\n              setChatText('');\n            }}\n          >\n            Send\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  const isGameStarted = () => game.numberOfPlayers === 4;\n\n  const renderWaiting = () => {\n    return (\n      <Col>\n        <div className=\"text-center\">\n          <h2 className=\"mb-4\">{game.name}</h2>\n          <div className=\"mb-4\">\n            <Spinner animation=\"border\" role=\"status\" />\n          </div>\n          <span>Waiting for an opponent....</span>\n        </div>\n      </Col>\n    );\n  };\n\n  const renderGame = () => {\n    return (\n      <>\n        <Col>\n          <div>Your piece color is {color}</div>\n          {game.turn === color && (\n            <div>It is your turn!</div>\n          )}\n          {game.turn !== color && (\n            <div>Waiting for opponent!</div>\n          )}\n          {renderBoard()}\n        </Col>\n        <Col>{renderChat()}</Col>\n      </>\n    );\n  };\n\n  return (\n    <Row>\n      {!isGameStarted() && renderWaiting()}\n      {isGameStarted() && renderGame()}\n    </Row>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}